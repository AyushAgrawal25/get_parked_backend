// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = "mysql://root:root@localhost:3306/prisma_db"
}

generator client {
  provider = "prisma-client-js"
}

// signUpStatus to confirm that signUp is properly Completed or not.
// TODO: set Storage Engine to InnoDB in server also.

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique @db.VarChar(255)
  userToken        String            @db.VarChar(255)
  signUpStatus     Int
  status           Int
  userDetails      UserDetails?
  profilePic       ProfilePic?
  userNotification UserNotification?
  slots            Slot?

  @@map("users")
}

model UserDetails {
  id          Int     @id @default(autoincrement())
  user        User?   @relation(fields: [userId], references: [id])
  userId      Int
  firstName   String? @db.VarChar(255)
  lastName    String? @db.VarChar(255)
  dialCode    String? @db.VarChar(10)
  phoneNumber String? @db.VarChar(15)
  gender      String? @db.VarChar(2)
  status      Int

  @@map("user_details")
}

model ProfilePic {
  id        Int     @id @default(autoincrement())
  user      User?   @relation(fields: [userId], references: [id])
  userId    Int
  url       String?
  thumbnail String?
  status    Int

  @@map("profile_pics")
}

model UserNotification {
  id     Int     @id @default(autoincrement())
  user   User?   @relation(fields: [userId], references: [id])
  userId Int
  token  String?
  status Int

  @@map("user_notifications")
}

model Slot {
  id             Int    @id @default(autoincrement())
  user           User?  @relation(fields: [userId], references: [id])
  userId         Int
  token          String @db.VarChar(1000)
  name           String @db.VarChar(100)
  address        String @db.VarChar(200)
  state          String @db.VarChar(50)
  city           String @db.VarChar(50)
  pincode        String @db.VarChar(20)
  landmark       String @db.VarChar(200)
  locationName   String @db.VarChar(100)
  country        String @db.VarChar(50)
  isoCountryCode String @db.VarChar(10)
  latitude       Float  @db.Double
  longitude      Float  @db.Double
  status         Int

  @@map("slots")
}

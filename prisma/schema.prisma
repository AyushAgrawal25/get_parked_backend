// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// signUpStatus to confirm that signUp is properly Completed or not.
// TODO: set Storage Engine to InnoDB in server also.

model User {
  id               Int               @id @default(autoincrement())
  email            String?           @unique @db.VarChar(255)
  userToken        String            @db.VarChar(255)
  signUpStatus     Int
  status           Int
  userDetails      UserDetails?
  userNotification UserNotification?
  slot             Slot?

  parkingRequests             SlotParkingRequest[]
  bookings                    SlotBooking[]
  parkings                    SlotParking[]
  slotRatingReviews           SlotRatingReview[]
  transactions                Transaction[]
  transactionsReal            TransactionReal[]
  fromUserTransactionsNonReal TransactionNonReal[] @relation(name: "NonRealTransactionFromUser")
  withUserTransactionsNonReal TransactionNonReal[] @relation(name: "NonRealTransactionWithUser")

  requesterTransactionRequests     TransactionRequests[] @relation(name: "TransactionRequestFromUser")
  requestedFromTransactionRequests TransactionRequests[] @relation(name: "TransactionRequestWithUser")

  recievedNotifications Notifications[] @relation(name: "NotificationRecieve")
  sentNotifications     Notifications[] @relation(name: "NotificationSend")

  queries     UserQuery[]  @relation("User_Queries")
  faqsUpVotes FAQUpVotes[] @relation("Users Upvotes")

  beneficiary      UserBeneficiary?
  withdrawRequests WithdrawRequests[]

  @@map("users")
}

enum UserAccountType {
  User
  Slot
  Admin
}

model UserDetails {
  id              Int        @id @default(autoincrement())
  user            User?      @relation(fields: [userId], references: [id])
  userId          Int
  email           String?    @db.VarChar(255)
  picUrl          String?    @db.VarChar(255)
  picThumbnailUrl String?    @db.VarChar(255)
  firstName       String?    @db.VarChar(100)
  lastName        String?    @db.VarChar(100)
  dialCode        String?    @db.VarChar(10)
  phoneNumber     String?    @db.VarChar(15)
  gender          UserGender
  status          Int

  @@map("user_details")
}

enum UserGender {
  Male
  Female
  Others
}

model UserNotification {
  id     Int     @id @default(autoincrement())
  user   User?   @relation(fields: [userId], references: [id])
  userId Int
  token  String?
  status Int

  @@map("user_notifications")
}

model UserBeneficiary {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int

  beneficiaryName String
  accountNumber   String
  ifscCode        String
  bankName        String
  upiId           String?

  status Int

  @@map("user_beneficiaries")
}

model Slot {
  id                  Int           @id @default(autoincrement())
  user                User?         @relation(fields: [userId], references: [id])
  userId              Int
  token               String        @db.VarChar(1000)
  name                String        @db.VarChar(100)
  address             String        @db.VarChar(200)
  state               String        @db.VarChar(50)
  city                String        @db.VarChar(50)
  pincode             String        @db.VarChar(20)
  landmark            String        @db.VarChar(200)
  locationName        String        @db.VarChar(100)
  country             String        @db.VarChar(50)
  isoCountryCode      String        @db.VarChar(10)
  latitude            Float         @db.Double
  longitude           Float         @db.Double
  length              Float         @db.Double
  breadth             Float         @db.Double
  height              Float         @db.Double
  startTime           Int
  endTime             Int
  spaceType           SlotSpaceType
  securityDepositTime Int
  vehicles            SlotVehicle[]
  status              Int

  parkingRequests   SlotParkingRequest[]
  bookings          SlotBooking[]
  parkings          SlotParking[]
  slotRatingReviews SlotRatingReview[]
  slotImages        SlotImages[]
  @@map("slots")
}

// Space type 1 and 2;
// 1 shed available and 2 open
enum SlotSpaceType {
  Sheded
  Open
}

model SlotVehicle {
  id     Int   @id @default(autoincrement())
  slot   Slot? @relation(fields: [slotId], references: [id])
  slotId Int

  typeData SlotVehicleTypeData @relation(fields: [typeId], references: [id])
  typeId   Int

  type   VehicleType
  fair   Float       @db.Double
  status Int

  parkingRequests   SlotParkingRequest[]
  bookings          SlotBooking[]
  parkings          SlotParking[]
  slotRatingReviews SlotRatingReview[]
  @@map("slot_vehicles")
}

model SlotVehicleTypeData {
  id      Int         @id @default(autoincrement())
  name    String
  length  Float       @db.Double
  breadth Float       @db.Double
  height  Float       @db.Double
  area    Float       @db.Double
  type    VehicleType
  status  Int

  vehicles SlotVehicle[]
  @@map("slot_vehicles_master")
}

enum VehicleType {
  BIKE
  MINI
  SEDAN
  VAN
  SUV
}

model SlotParkingRequest {
  id Int @id @default(autoincrement())

  slot   Slot @relation(fields: [slotId], references: [id])
  slotId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int

  vehicle   SlotVehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int

  spaceType    SlotSpaceType
  parkingHours Int

  // Notifications
  requestNotification   Notifications? @relation(name: "ParkingRequestNotification", fields: [requestNotificationId], references: [id])
  requestNotificationId Int?

  responseNotification   Notifications? @relation(name: "ParkingRequestResponseNotification", fields: [responseNotificationId], references: [id])
  responseNotificationId Int?

  time   DateTime @default(now()) @updatedAt @db.Timestamp(0)
  status Int

  booking SlotBooking?
  @@map("slot_parking_requests")
}

model SlotBooking {
  id Int @id @default(autoincrement())

  slot   Slot @relation(fields: [slotId], references: [id])
  slotId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int

  vehicle   SlotVehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int

  parkingRequest   SlotParkingRequest @relation(fields: [parkingRequestId], references: [id])
  parkingRequestId Int

  parkingOTP   String        @default("0000")
  time         DateTime      @default(now()) @db.Timestamp(0)
  spaceType    SlotSpaceType
  parkingHours Int

  duration       Int
  exceedDuration Int @default(0)
  status         Int

  //Transactions
  fromUserToSlotTransaction   Transaction? @relation(name: "FromUserToSlot_Transaction", fields: [fromUserToSlotTransactionId], references: [id])
  fromUserToSlotTransactionId Int?

  fromSlotToUserTransaction   Transaction? @relation(name: "FromSlotToUser_Transaction", fields: [fromSlotToUserTransactionId], references: [id])
  fromSlotToUserTransactionId Int?

  fromSlotToAppTransaction   Transaction? @relation(name: "FromSlotToApp_Transaction", fields: [fromSlotToAppTransactionId], references: [id])
  fromSlotToAppTransactionId Int?

  fromAppToSlotTransaction   Transaction? @relation(name: "FromAppToSlot_Transaction", fields: [fromAppToSlotTransactionId], references: [id])
  fromAppToSlotTransactionId Int?

  // Notifications
  forUser_BookingNotification   Notifications? @relation(name: "BookingNotification_ForUser", fields: [forUser_BookingNotificationId], references: [id])
  forUser_BookingNotificationId Int?

  forSlot_BookingNotification   Notifications? @relation(name: "BookingNotification_ForSlot", fields: [forSlot_BookingNotificationId], references: [id])
  forSlot_BookingNotificationId Int?

  forUser_CancellationNotification   Notifications? @relation(name: "BookingCancellationNotification_ForUser", fields: [forUser_CancellationNotificationId], references: [id])
  forUser_CancellationNotificationId Int?

  forSlot_CancellationNotification   Notifications? @relation(name: "BookingCancellationNotification_ForSlot", fields: [forSlot_CancellationNotificationId], references: [id])
  forSlot_CancellationNotificationId Int?

  parking SlotParking?
  @@map("slot_bookings")
}

model SlotParking {
  id Int @id @default(autoincrement())

  slot   Slot @relation(fields: [slotId], references: [id])
  slotId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int

  vehicle   SlotVehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int

  booking   SlotBooking @relation(fields: [bookingId], references: [id])
  bookingId Int

  withdrawOTP  String        @default("0000")
  spaceType    SlotSpaceType
  parkingHours Int

  // Notifications
  forUser_ParkingNotification   Notifications? @relation(name: "ParkingNotification_ForUser", fields: [forUser_ParkingNotificationId], references: [id])
  forUser_ParkingNotificationId Int?

  forSlot_ParkingNotification   Notifications? @relation(name: "ParkingNotification_ForSlot", fields: [forSlot_ParkingNotificationId], references: [id])
  forSlot_ParkingNotificationId Int?

  forUser_WithdrawNotification   Notifications? @relation(name: "ParkingWithdrawNotification_ForUser", fields: [forUser_WithdrawNotificationId], references: [id])
  forUser_WithdrawNotificationId Int?

  forSlot_WithdrawNotification   Notifications? @relation(name: "ParkingWithdrawNotification_ForSlot", fields: [forSlot_WithdrawNotificationId], references: [id])
  forSlot_WithdrawNotificationId Int?

  time   DateTime @default(now()) @db.Timestamp(0)
  status Int

  slotRatingReview SlotRatingReview?

  @@map("slot_parkings")
}

model SlotRatingReview {
  id Int @id @default(autoincrement())

  slot   Slot @relation(fields: [slotId], references: [id])
  slotId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  parking   SlotParking @relation(fields: [parkingId], references: [id])
  parkingId Int

  vehicle   SlotVehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int

  ratingValue Float    @db.Double
  review      String?  @db.VarChar(1000)
  time        DateTime @default(now()) @db.Timestamp(0)
  status      Int

  @@map("slot_ratings_reviews")
}

model SlotImages {
  id Int @id @default(autoincrement())

  slot   Slot? @relation(fields: [slotId], references: [id])
  slotId Int

  type         SlotImageType
  url          String
  thumbnailUrl String?
  status       Int

  @@map("slot_images")
}

enum SlotImageType {
  Main
  Others
}

enum TransactionType {
  Real
  NonReal
}

enum MoneyTransferType {
  Add
  Remove
}

model Transaction {
  id Int @id @default(autoincrement())

  user        User            @relation(fields: [userId], references: [id])
  userId      Int
  accountType UserAccountType

  transferType MoneyTransferType
  amount       Float             @db.Double
  type         TransactionType

  // Notification
  notification   Notifications? @relation(name: "TransactionNotification", fields: [notificationId], references: [id])
  notificationId Int?

  time   DateTime @default(now()) @db.Timestamp(0)
  status Int

  transactionReal    TransactionReal?
  transactionNonReal TransactionNonReal?

  requesterTransactionRequest     TransactionRequests? @relation(name: "Requester_Transaction")
  requestedFromTransactionRequest TransactionRequests? @relation(name: "Requested_From_Transaction")

  fromUserToSlot_booking SlotBooking? @relation(name: "FromUserToSlot_Transaction")
  fromSlotToUser_booking SlotBooking? @relation(name: "FromSlotToUser_Transaction")
  fromSlotToApp_booking  SlotBooking? @relation(name: "FromSlotToApp_Transaction")
  fromAppToSlot_booking  SlotBooking? @relation(name: "FromAppToSlot_Transaction")

  withdrawRequest WithdrawRequests? @relation("WithdrawRequest_Transactions")
  @@map("transactions")
}

model TransactionReal {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int

  accountType  UserAccountType
  amount       Float             @db.Double
  transferType MoneyTransferType

  // Payment reference Code
  paymentRef String?

  // Backened generated reference code.
  txnCode String

  time   DateTime @default(now()) @db.Timestamp(0)
  status Int

  @@map("transactions_real")
}

model TransactionNonReal {
  id Int @id @default(autoincrement())

  transaction   Transaction            @relation(fields: [transactionId], references: [id])
  transactionId Int
  type          TransactionNonRealType

  fromUser        User            @relation(name: "NonRealTransactionFromUser", fields: [fromUserId], references: [id])
  fromUserId      Int
  fromAccountType UserAccountType

  withUser        User            @relation(name: "NonRealTransactionWithUser", fields: [withUserId], references: [id])
  withUserId      Int
  withAccountType UserAccountType

  amount       Float             @db.Double
  txnCode      String
  transferType MoneyTransferType
  time         DateTime          @default(now()) @db.Timestamp(0)
  status       Int

  @@map("transactions_non_real")
}

enum TransactionNonRealType {
  SlotBookings
  TransactionRequests
}

model TransactionRequests {
  id Int @id @default(autoincrement())

  requesterUser        User            @relation(name: "TransactionRequestFromUser", fields: [requesterUserId], references: [id])
  requesterUserId      Int
  requesterAccountType UserAccountType

  requestedFromUser        User            @relation(name: "TransactionRequestWithUser", fields: [requestedFromUserId], references: [id])
  requestedFromUserId      Int
  requestedFromAccountType UserAccountType

  amount       Float             @db.Double
  note         String            @default("")
  transferType MoneyTransferType

  requesterTransaction   Transaction? @relation(name: "Requester_Transaction", fields: [requesterTransactionId], references: [id])
  requesterTransactionId Int?

  requestedFromTransaction   Transaction? @relation(name: "Requested_From_Transaction", fields: [requestedFromTransactionId], references: [id])
  requestedFromTransactionId Int?

  // Notification
  requestNotification   Notifications? @relation(name: "TransactionRequestNotification", fields: [requestNotificationId], references: [id])
  requestNotificationId Int?

  responseNotification   Notifications? @relation(name: "TransactionRequestResponseNotification", fields: [responseNotificationId], references: [id])
  responseNotificationId Int?

  time   DateTime @default(now()) @db.Timestamp(0)
  status Int

  @@map("transaction_requests")
}

model WithdrawRequests {
  id Int @id @default(autoincrement())

  user        User            @relation(fields: [userId], references: [id])
  userId      Int
  accountType UserAccountType

  type WithdrawRequestType

  createdAt   DateTime  @default(now()) @db.Timestamp(0)
  respondedAt DateTime?


  transaction   Transaction? @relation(name: "WithdrawRequest_Transactions", fields: [transactionId], references: [id])
  transactionId Int?

  status Int

  @@map("withdraw_requests")
}

enum WithdrawRequestType {
  Wallet
  Vault
}

model Notifications {
  id Int @id @default(autoincrement())

  recieverUser        User?           @relation(name: "NotificationRecieve", fields: [recieverUserId], references: [id])
  recieverUserId      Int
  recieverAccountType UserAccountType

  senderUser        User?           @relation(name: "NotificationSend", fields: [senderUserId], references: [id])
  senderUserId      Int
  senderAccountType UserAccountType

  type NotificationType

  time   DateTime @default(now()) @updatedAt @db.Timestamp(0)
  status Int

  // Parking Requests
  parkingRequest              SlotParkingRequest? @relation(name: "ParkingRequestNotification")
  parkingRequest_withResponse SlotParkingRequest? @relation(name: "ParkingRequestResponseNotification")

  // Bookings
  booking_ForUser             SlotBooking? @relation("BookingNotification_ForUser")
  booking_ForSlot             SlotBooking? @relation("BookingNotification_ForSlot")
  bookingCancellation_ForUser SlotBooking? @relation("BookingCancellationNotification_ForUser")
  bookingCancellation_ForSlot SlotBooking? @relation("BookingCancellationNotification_ForSlot")

  // Parkings
  parking_ForUser SlotParking? @relation("ParkingNotification_ForUser")
  parking_ForSlot SlotParking? @relation("ParkingNotification_ForSlot")

  parkingWithdraw_ForUser SlotParking? @relation("ParkingWithdrawNotification_ForUser")
  parkingWithdraw_ForSlot SlotParking? @relation("ParkingWithdrawNotification_ForSlot")

  // Transactions
  transaction Transaction? @relation("TransactionNotification")

  // Transaction Requests
  transactionRequest              TransactionRequests? @relation("TransactionRequestNotification")
  transactionRequest_withResponse TransactionRequests? @relation("TransactionRequestResponseNotification")

  @@map("notifications")
}

enum NotificationType {
  ParkingRequest
  ParkingRequestResponse

  Booking_ForSlot
  Booking_ForUser
  BookingCancellation_ForSlot
  BookingCancellation_ForUser

  Parking_ForSlot
  Parking_ForUser
  ParkingWithdraw_ForSlot
  ParkingWithdraw_ForUser

  Transaction

  TransactionRequest
  TransactionRequestResponse
}

model UserQuery {
  id Int @id @default(autoincrement())

  user   User @relation(name: "User_Queries", fields: [userId], references: [id])
  userId Int

  query       String
  description String?
  answer      String?
  status      Int

  @@map("user_queries")
}

model FAQS {
  id           Int          @id @default(autoincrement())
  query        String
  description  String
  answer       String
  upVotesCount Int          @default(0)
  status       Int
  upVotes      FAQUpVotes[] @relation("FAQs Upvotes")

  @@map("faqs")
}

model FAQUpVotes {
  id Int @id @default(autoincrement())

  faq   FAQS @relation(name: "FAQs Upvotes", fields: [faqId], references: [id])
  faqId Int

  user   User @relation(name: "Users Upvotes", fields: [userId], references: [id])
  userId Int

  status Int

  @@unique([faqId, userId])
  @@map("faq_upvotes")
}
